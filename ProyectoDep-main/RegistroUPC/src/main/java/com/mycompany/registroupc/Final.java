package com.mycompany.registroupc;

import java.awt.Component;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Collections;
import java.util.Date;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.*;

/**
 *
 * @author PC
 */
public class Final extends javax.swing.JFrame {

    /**
     * Creates new form Final
     */
    public Final() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(114, 200, 148));
        jPanel1.setOpaque(false);

        jButton1.setBackground(new java.awt.Color(114, 200, 148));
        jButton1.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Logout");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(114, 200, 148));
        jButton2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Clean all txt");
        jButton2.setToolTipText("Limpiar todos los datos de partidos");
        jButton2.setBorder(javax.swing.BorderFactory.createCompoundBorder());
        jButton2.setBorderPainted(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jComboBox1.setBackground(new java.awt.Color(217, 217, 217));
        jComboBox1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jComboBox1.setForeground(new java.awt.Color(60, 155, 97));
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Gestionar: ", "1. Agregar Equipo", "2. Modificar Equipo", "3. Eliminar Equipo", "4. Listar Equipos"}));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(114, 200, 148));
        jButton3.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Registrar Partido");
        jButton3.setBorder(null);
        jButton3.setBorderPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(114, 200, 148));
        jButton4.setFont(new java.awt.Font("SansSerif", 1, 20)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Ver resultados");
        jButton4.setBorder(null);
        jButton4.setBorderPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("AcademyMaster");

        jLabel2.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("X");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(303, 303, 303)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jLabel1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(142, 142, 142)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(55, 55, 55)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(73, 73, 73)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 330, 490));

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\jesus\\Downloads\\4K.Video.Downloader.4.24.2.5380 - XYZ\\ProyectoDep-main (2)\\ProyectoDep-main (2)\\ProyectoDep-main\\RegistroUPC\\src\\main\\java\\oooo\\colombia-viva.gif")); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 370, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        IU U = new IU();
        U.setVisible(true);
        dispose();
// TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        //cargar
        ArrayList<Object> equipos = new ArrayList<>();

        try {
            BufferedReader reader = new BufferedReader(new FileReader("datos.txt"));

            String line;
            while ((line = reader.readLine()) != null) {
                String[] datos = line.split(",");
                if (datos.length >= 2) {
                    String nombreEquipo = datos[1];
                    equipos.add(nombreEquipo);
                }
            }

            reader.close();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Error al cargar los equipos.", "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
            
 // Ventana 1
    JFrame nuevaVentana = new JFrame();
    nuevaVentana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    nuevaVentana.setSize(300, 350);
    nuevaVentana.setLocationRelativeTo(null);
    nuevaVentana.setTitle("Registrar Equipo");
    nuevaVentana.setVisible(true);
    nuevaVentana.setResizable(false);
    nuevaVentana.setLayout(null);

    JLabel labelEquipoLocal = new JLabel("Equipo Local:");
    labelEquipoLocal.setBounds(20, 20, 100, 30);

    JComboBox<String> comboBoxEquipoLocal = new JComboBox<>();
    for (Object equipo : equipos) {
        comboBoxEquipoLocal.addItem((String) equipo);
    }
    comboBoxEquipoLocal.setBounds(120, 20, 150, 30);

    JLabel labelEquipoVisitante = new JLabel("Equipo Visitante:");
    labelEquipoVisitante.setBounds(20, 60, 100, 30);

    JComboBox<String> comboBoxEquipoVisitante = new JComboBox<>();
    for (Object equipo : equipos) {
        comboBoxEquipoVisitante.addItem((String) equipo);
    }
    comboBoxEquipoVisitante.setBounds(120, 60, 150, 30);

    JLabel labelGolesLocal = new JLabel("Goles Local:");
    labelGolesLocal.setBounds(20, 100, 100, 30);

    JTextField textFieldGolesLocal = new JTextField();
    textFieldGolesLocal.setBounds(120, 100, 150, 30);

    JLabel labelGolesVisitante = new JLabel("Goles Visitante:");
    labelGolesVisitante.setBounds(20, 140, 100, 30);

    JTextField textFieldGolesVisitante = new JTextField();
    textFieldGolesVisitante.setBounds(120, 140, 150, 30);

    JLabel labelFecha = new JLabel("Fecha");
    labelFecha.setBounds(20, 180, 100, 30);
    
    com.toedter.calendar.JDateChooser calen = new com.toedter.calendar.JDateChooser();
    calen.setBounds(120, 180, 150, 30);
    calen.setDateFormatString("dd/MM/yyyy");

    JButton botonRegistrarPartido = new JButton("Registrar");
    botonRegistrarPartido.setBounds(120, 220, 100, 30);

    botonRegistrarPartido.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent e) {
            String equipoLocal = (String) comboBoxEquipoLocal.getSelectedItem();
            String equipoVisitante = (String) comboBoxEquipoVisitante.getSelectedItem();
            int golesLocal = Integer.parseInt(textFieldGolesLocal.getText());
            int golesVisitante = Integer.parseInt(textFieldGolesVisitante.getText());

            // aca se guarda la fecha obteniendola del jcalendar
                    String fechaSeleccionada = "";
                    if (calen.getDate() != null) {
                SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                fechaSeleccionada = dateFormat.format(calen.getDate());
            }
            try {
                BufferedWriter writer = new BufferedWriter(new FileWriter("partidos.txt", true));
                writer.write(equipoLocal + "," + equipoVisitante + "," + golesLocal + "," + golesVisitante + "," + fechaSeleccionada);
                writer.newLine();
                writer.close();

                JOptionPane.showMessageDialog(nuevaVentana, "Partido registrado correctamente.");
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(nuevaVentana, "Error al registrar el partido.", "Error", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace();
            }
            nuevaVentana.dispose();
        }
    });

    nuevaVentana.add(labelEquipoLocal);
    nuevaVentana.add(comboBoxEquipoLocal);
    nuevaVentana.add(labelEquipoVisitante);
    nuevaVentana.add(comboBoxEquipoVisitante);
    nuevaVentana.add(labelGolesLocal);
    nuevaVentana.add(textFieldGolesLocal);
    nuevaVentana.add(labelGolesVisitante);
    nuevaVentana.add(textFieldGolesVisitante);
    nuevaVentana.add(labelFecha);
    nuevaVentana.add(calen);
    nuevaVentana.add(botonRegistrarPartido);


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JFrame nuevaVentana = new JFrame();
        nuevaVentana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        nuevaVentana.setSize(600, 400);
        nuevaVentana.setLocationRelativeTo(null);
        nuevaVentana.setTitle("Lista de Equipos");
        nuevaVentana.setVisible(true);
        nuevaVentana.setResizable(false);
        nuevaVentana.setLayout(null);

        DefaultTableModel tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableModel.addColumn("Equipo Local");
        tableModel.addColumn("Equipo Visitante");
        tableModel.addColumn("Goles Local");
        tableModel.addColumn("Goles Visitante");
        tableModel.addColumn("Fecha");

        try (BufferedReader reader = new BufferedReader(new FileReader("partidos.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] datos = line.split(",");
                if (datos.length >= 3) {
                    tableModel.addRow(datos);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        JTable table = new JTable(tableModel);

        TableColumnModel columnModel = table.getColumnModel();

        TableColumn fechaColumn = columnModel.getColumn(4);

        fechaColumn.setCellRenderer(new DefaultTableCellRenderer() {
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                if (value instanceof Date) {
                    value = dateFormat.format((Date) value);
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });

        int fechaColumnIndex = 4;
        List<Date> fechas = new ArrayList<>();
        for (int i = 0; i < tableModel.getRowCount(); i++) {
            try {
                String fechaStr = (String) tableModel.getValueAt(i, fechaColumnIndex);
                Date fecha = new SimpleDateFormat("dd/MM/yyyy").parse(fechaStr);
                fechas.add(fecha);
            } catch (ParseException e) {
                e.printStackTrace();
            }
        }

        // Ordenar las fechas en orden descendente
        Collections.sort(fechas, Collections.reverseOrder());

        // Crear un nuevo modelo de tabla ordenado
        DefaultTableModel sortedTableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        sortedTableModel.addColumn("Equipo Local");
        sortedTableModel.addColumn("Equipo Visitante");
        sortedTableModel.addColumn("Goles Local");
        sortedTableModel.addColumn("Goles Visitante");
        sortedTableModel.addColumn("Fecha");

        for (Date fecha : fechas) {
            String fechaStr = new SimpleDateFormat("dd/MM/yyyy").format(fecha);
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                if (tableModel.getValueAt(i, fechaColumnIndex).equals(fechaStr)) {
                    Object[] rowData = new Object[tableModel.getColumnCount()];
                    for (int j = 0; j < tableModel.getColumnCount(); j++) {
                        rowData[j] = tableModel.getValueAt(i, j);
                    }
                    sortedTableModel.addRow(rowData);
                    break;
                }
            }
        }

        // Asignar el nuevo modelo de tabla ordenado
        table.setModel(sortedTableModel);

        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBounds(20, 20, 560, 320);

        nuevaVentana.add(scrollPane);

        nuevaVentana.setVisible(true);        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        limpiarArchivos();    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
        
        switch (jComboBox1.getSelectedIndex()) {
            case 1 ->                 {
                    JFrame nuevaVentana = new JFrame();
                    nuevaVentana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    nuevaVentana.setSize(350, 220);
                    nuevaVentana.setLocationRelativeTo(null);
                    nuevaVentana.setTitle("Agregar Equipo");
                    nuevaVentana.setVisible(true);
                    nuevaVentana.setResizable(false);
                    nuevaVentana.setLayout(null);
                    
                    JLabel labelID = new JLabel("ID:");
                    labelID.setBounds(30, 20, 100, 30);

                    JTextField textFieldID = new JTextField();
                    textFieldID.setBounds(170, 20, 150, 30);

                    JLabel labelNombreEquipo = new JLabel("Nombre Equipo:");
                    labelNombreEquipo.setBounds(30, 60, 100, 30);

                    JTextField textFieldNombreEquipo = new JTextField();
                    textFieldNombreEquipo.setBounds(170, 60, 150, 30);

                    JLabel labelNombreEntrenador = new JLabel("Nombre Entrenador:");
                    labelNombreEntrenador.setBounds(30, 100, 120, 30);
                    
                    JTextField textFieldNombreEntrenador = new JTextField();
                    textFieldNombreEntrenador.setBounds(170, 100, 150, 30);

                    JButton botonGuardar = new JButton("Guardar");
                    botonGuardar.setBounds(120, 140, 100, 30);
                    
                    botonGuardar.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            String id = textFieldID.getText();
                            String nombreEquipo = textFieldNombreEquipo.getText();
                            String nombreEntrenador = textFieldNombreEntrenador.getText();
                            
                                if (existeID(id)) {
                                    JOptionPane.showMessageDialog(null, "El ID ya esta en uso. Inténtalo con otro.");
                                return;
                                } else {
                                    try {

                                        BufferedWriter writer = new BufferedWriter(new FileWriter("datos.txt", true));
                                        writer.write(id + "," + nombreEquipo + "," + nombreEntrenador);
                                        writer.newLine();
                                        writer.close();
                                        JOptionPane.showMessageDialog(nuevaVentana, "Datos guardados correctamente.");
                                    } catch (IOException ex) {
                                        JOptionPane.showMessageDialog(nuevaVentana, "Error al guardar los datos.", "Error", JOptionPane.ERROR_MESSAGE);
                                        ex.printStackTrace();
                                    }
                                }
                            nuevaVentana.dispose();
                        }

                    private boolean existeID(String id) {
                        try {
                            BufferedReader reader = new BufferedReader(new FileReader("datos.txt"));
                            String line;
                            while ((line = reader.readLine()) != null) {
                                String[] datos = line.split(",");
                                if (datos.length >= 1 && datos[0].equals(id)) {
                                    reader.close();
                                    return true;
                                }
                            }
                            reader.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        return false; 
                    }

                    });     
                    nuevaVentana.add(labelID);
                    nuevaVentana.add(textFieldID);
                    nuevaVentana.add(labelNombreEquipo);
                    nuevaVentana.add(textFieldNombreEquipo);
                    nuevaVentana.add(labelNombreEntrenador);
                    nuevaVentana.add(textFieldNombreEntrenador);
                    nuevaVentana.add(botonGuardar);
                    
                }
            
            case 2 ->                 {
                    JFrame nuevaVentana = new JFrame();
                    nuevaVentana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    nuevaVentana.setSize(320, 230);
                    nuevaVentana.setLocationRelativeTo(null);
                    nuevaVentana.setTitle("Editar Equipo");
                    nuevaVentana.setVisible(true);
                    nuevaVentana.setResizable(false);
                    nuevaVentana.setLayout(null); 
                    
                    JLabel labelID = new JLabel("ID:");
                    labelID.setBounds(20, 20, 100, 30);
                    
                    JTextField textFieldID = new JTextField();
                    textFieldID.setBounds(120, 20, 150, 30);
                    
                    JLabel labelNombreEquipo = new JLabel("Nombre Equipo:");
                    labelNombreEquipo.setBounds(20, 60, 100, 30);
                    
                    JTextField textFieldNombreEquipo = new JTextField();
                    textFieldNombreEquipo.setBounds(120, 60, 150, 30);
                    
                    JLabel labelNombreEntrenador = new JLabel("Nombre Entrenador:");
                    labelNombreEntrenador.setBounds(20, 100, 100, 30);
                    
                    JTextField textFieldNombreEntrenador = new JTextField();
                    textFieldNombreEntrenador.setBounds(120, 100, 150, 30);
                    
                    JButton botonEditar = new JButton("Editar");
                    botonEditar.setBounds(120, 140, 100, 30);
                                        
                    botonEditar.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            String id = textFieldID.getText();
                            String nombreEquipo = textFieldNombreEquipo.getText();
                            String nombreEntrenador = textFieldNombreEntrenador.getText();
                            
                            try {
                                File inputFile = new File("datos.txt");
                                File tempFile = new File("temp.txt");
                                
                                BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                                BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));
                                
                                String line;
                                boolean encontrado = false;
                                
                                while ((line = reader.readLine()) != null) {
                                    String[] datos = line.split(",");
                                    if (datos.length >= 3 && datos[0].equals(id)) {
                                        datos[1] = nombreEquipo;
                                        datos[2] = nombreEntrenador;
                                        line = String.join(",", datos);
                                        encontrado = true;
                                    }
                                    writer.write(line + System.lineSeparator());
                                }
                                
                                reader.close();
                                writer.close();
                                
                                if (encontrado) {
                                    inputFile.delete();
                                    tempFile.renameTo(inputFile);
                                    JOptionPane.showMessageDialog(nuevaVentana, "Equipo editado correctamente.");
                                } else {
                                    JOptionPane.showMessageDialog(nuevaVentana, "No se encontró un equipo con el ID proporcionado.");
                                }
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(nuevaVentana, "Error al editar el equipo.");
                                ex.printStackTrace();
                            }

                            nuevaVentana.dispose();
                        }
                    });    
                    nuevaVentana.add(labelID);
                    nuevaVentana.add(textFieldID);
                    nuevaVentana.add(labelNombreEquipo);
                    nuevaVentana.add(textFieldNombreEquipo);
                    nuevaVentana.add(labelNombreEntrenador);
                    nuevaVentana.add(textFieldNombreEntrenador);
                    nuevaVentana.add(botonEditar);
                }
            case 3 ->                 {
                    JFrame nuevaVentana = new JFrame();
                    nuevaVentana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    nuevaVentana.setSize(300, 150);
                    nuevaVentana.setLocationRelativeTo(null);
                    nuevaVentana.setTitle("Eliminar Equipo");
                    nuevaVentana.setVisible(true);
                    nuevaVentana.setResizable(false);
                    nuevaVentana.setLayout(null); 
                    
                    JLabel labelID = new JLabel("ID:");
                    labelID.setBounds(20, 20, 100, 30);
                    
                    JTextField textFieldID = new JTextField();
                    textFieldID.setBounds(120, 20, 150, 30);
                    
                    JButton botonEliminar = new JButton("Eliminar");
                    botonEliminar.setBounds(120, 60, 100, 30);
                    
                    botonEliminar.addActionListener(new ActionListener() {
                        public void actionPerformed(ActionEvent e) {
                            String id = textFieldID.getText();
                            
                            try {
                                File inputFile = new File("datos.txt");
                                File tempFile = new File("temp.txt");
                                
                                BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                                BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));
                                
                                String line;
                                boolean encontrado = false;
                                
                                while ((line = reader.readLine()) != null) {
                                    String[] datos = line.split(",");
                                    if (datos.length >= 1 && datos[0].equals(id)) {
                                        encontrado = true;
                                        continue;
                                    }
                                    writer.write(line + System.lineSeparator());
                                }
                                
                                reader.close();
                                writer.close();
                                
                                if (encontrado) {
                                    inputFile.delete();
                                    tempFile.renameTo(inputFile);
                                    JOptionPane.showMessageDialog(nuevaVentana, "Equipo eliminado correctamente.");
                                } else {
                                    JOptionPane.showMessageDialog(nuevaVentana, "No se encontró un equipo con el ID proporcionado.", "Error", JOptionPane.ERROR_MESSAGE);
                                }
                            } catch (IOException ex) {
                                JOptionPane.showMessageDialog(nuevaVentana, "Error al eliminar el equipo.", "Error", JOptionPane.ERROR_MESSAGE);
                                ex.printStackTrace();
                            }

                            nuevaVentana.dispose();
                        }
                    });    
                    nuevaVentana.add(labelID);
                    nuevaVentana.add(textFieldID);
                    nuevaVentana.add(botonEliminar);
                }
            case 4 ->               {
                    
                    JFrame nuevaVentana = new JFrame();
                    nuevaVentana.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    nuevaVentana.setSize(600, 400);
                    nuevaVentana.setLocationRelativeTo(null);
                    nuevaVentana.setTitle("Lista de Equipos");
                    nuevaVentana.setVisible(true);
                    nuevaVentana.setResizable(false);
                    nuevaVentana.setLayout(null); 
                    
                    DefaultTableModel tableModel = new DefaultTableModel();
                    tableModel.addColumn("ID");
                    tableModel.addColumn("Nombre Equipo");
                    tableModel.addColumn("Nombre Entrenador");

                    try (BufferedReader reader = new BufferedReader(new FileReader("datos.txt"))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            String[] datos = line.split(",");
                            if (datos.length >= 3) {
                                tableModel.addRow(datos);
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }

                    JTable table = new JTable(tableModel);
                    

                        JScrollPane scrollPane = new JScrollPane(table);
                        scrollPane.setBounds(20, 20, 560, 320);

                        nuevaVentana.add(scrollPane);

                        nuevaVentana.setVisible(true);
                }
            default -> {
            }
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed
    
    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        System.exit(0);

    }//GEN-LAST:event_jLabel2MouseClicked
    
        public boolean isCellEditable(int row, int column) {
            return false;
    }
    
    private void limpiarArchivos() {
        limpiarArchivo("partidos.txt");
        limpiarArchivo("datos.txt");
    }

    private void limpiarArchivo(String nombreArchivo) {
        try {
            FileWriter writer = new FileWriter(nombreArchivo);
            writer.write("");
            writer.close();
            JOptionPane.showMessageDialog(null, "Se han reseteado todos los datos de partidos");
        } catch (IOException e) {
            System.out.println("Error al limpiar el archivo " + nombreArchivo);
            e.printStackTrace();
        }
    }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Final.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Final().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
